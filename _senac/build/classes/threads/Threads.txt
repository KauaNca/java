THREAD

Uma Thread é uma unidade básica de execução dentro de um programa. Pense nela como uma trilha individual em uma 
pista de corrida: múltiplas trilhas permitem que várias corridas (ou tarefas) ocorram ao mesmo tempo sem interferirem umas nas outras.

Aqui estão alguns pontos-chave sobre threads:

Multitarefa: Threads permitem que programas executem múltiplas tarefas simultaneamente. Por exemplo, um navegador pode carregar uma 
página da web em uma thread enquanto outra thread continua a responder aos cliques do usuário.

Paralelismo: Em sistemas com múltiplos núcleos de CPU, threads podem ser executadas em paralelo, 
melhorando a eficiência e o desempenho do programa.

Uso em Interfaces Gráficas: Em aplicativos com interfaces gráficas, é comum usar threads separadas para realizar tarefas demoradas 
(como contagem, downloads, etc.) para que a interface gráfica permaneça responsiva.


new Thread()
Quando você vê new Thread(), significa que você está criando uma 
nova thread. Aqui está um exemplo simples para ilustrar:

Ex.:
new Thread(new Runnable() {
    public void run() {
        // Código que será executado na nova thread
    }
}).start();

Neste exemplo:

new Thread(new Runnable() { ... }) cria uma nova thread e define o 
código que será executado nela.

start() inicia a execução da thread.


POR QUE USAR THREADS AO INVÊS DE FAZER UM MÉTODO?

Boa pergunta! Usar Thread ao invés de apenas criar um novo método tem alguns benefícios específicos, 
especialmente em aplicações que precisam manter a interface gráfica responsiva. Aqui estão algumas razões para usar Thread:

Execução Paralela:
Thread: Permite que você execute código em paralelo com outras partes do programa. Isso é útil para tarefas que podem levar algum tempo (como contar, carregar dados, etc.), pois permite que a aplicação continue respondendo a eventos do usuário.
Novo Método: Se você criar um novo método e chamá-lo diretamente, ele será executado na mesma thread que o chamou. Se essa thread for a Event Dispatch Thread (EDT), a interface gráfica pode congelar até que o método termine.

Manter a UI Responsiva:
Thread: Ao executar tarefas demoradas em uma thread separada, a Event Dispatch Thread (EDT), que é responsável por atualizar a interface gráfica, não fica bloqueada. 
Isso mantém a interface do usuário responsiva e evita travamentos.
Novo Método: Se você colocar uma tarefa longa em um método e executá-lo diretamente na EDT, a interface gráfica pode se tornar não responsiva.

Organização e Estrutura:
Thread: Facilita a organização do código ao separar claramente as tarefas de execução paralela. Também permite dividir grandes tarefas em várias threads, 
melhorando a eficiência e o desempenho.
Novo Método: Pode resultar em código menos organizado, especialmente se você tentar gerenciar execução paralela manualmente dentro de métodos.


Ou seja, a forma que vi de fazer contagem não deu certo comigo pois a tarefa de contar estava sendo executada primeiro
para depois abrir o frame. 
Isso bloqueará a interface gráfica até que a contagem termine, tornando-a não responsiva.




THREADS: TAREFAS PARALELAS

public class Paralelo {

    public static void main(String[] args) {
        // Criação das threads
        Thread thread1 = new Thread(new Contador("Thread 1"));
        Thread thread2 = new Thread(new Contador("Thread 2"));

        // Início das threads
        thread1.start();
        thread2.start();
    }
}

// Classe que implementa Runnable para ser usada nas threads
class Contador implements Runnable {
    private String nome;

    public Contador(String nome) {
        this.nome = nome;
    }

    @Override
    public void run() {
        for (int i = 0; i < 10; i++) {
            System.out.println(nome + ": " + i);
            try {
                Thread.sleep(1000); // Pausa de 1 segundo entre as contagens
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

Explicação:
Classe Principal (Paralelo):
Dentro do método main, criamos duas threads: thread1 e thread2.
Ambas as threads utilizam a classe Contador, que implementa a interface Runnable.

Classe Contador:
Implementa a interface Runnable, o que significa que precisa sobrescrever o método run().
Dentro do método run(), é feita a contagem de 0 a 9, com uma pausa de 1 segundo (Thread.sleep(1000)) entre cada número.
O nome da thread (nome) é usado para distinguir as saídas no console.

Execução Paralela:
Ao chamar thread1.start() e thread2.start(), ambas as threads começam a executar o método run() da classe Contador simultaneamente.
As saídas das contagens das duas threads são impressas no console em paralelo.


CLASSE RUNNABLE()
A interface Runnable em Java é uma maneira de definir uma tarefa que pode ser executada por uma thread. 
A interface contém apenas um método, run(), que você deve implementar para definir o código que será executado pela thread.

public interface Runnable {
    void run();
}

Para usar a interface Runnable, você deve criar uma classe que a implemente e 
fornecer uma implementação para o método run(). 
Em seguida, você pode criar uma Thread e passar uma instância da sua classe Runnable 
para o construtor da Thread. Aqui está um exemplo simples para ilustrar:

public class MinhaTarefa implements Runnable {
    @Override
    public void run() {
        for (int i = 0; i < 5; i++) {
            System.out.println("Executando na thread: " + i);
            try {
                Thread.sleep(1000); // Pausa de 1 segundo
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        MinhaTarefa tarefa = new MinhaTarefa();
        Thread thread = new Thread(tarefa);
        thread.start(); // Inicia a execução da thread
    }
}

Explicação:
Implementação de Runnable:
A classe MinhaTarefa implementa a interface Runnable e, portanto, deve fornecer uma implementação 
para o método run().
No método run(), colocamos um loop que imprime uma mensagem e pausa por 1 segundo usando Thread.sleep(1000).

Criando e Iniciando a Thread:
No método main(), criamos uma instância de MinhaTarefa.
Em seguida, criamos uma nova Thread e passamos a instância de MinhaTarefa para o construtor da Thread.
Finalmente, chamamos thread.start() para iniciar a execução da thread, o que faz com que o método run() 
seja executado na nova thread.