
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author kauan
 */
public class Raquete_mosquito extends javax.swing.JFrame {

    int bateria; 
    String simbolo = "%"; //para aparecer junto 
    int mosquito;
    String ligado; //servir para condições
    int diminuir; //servir para o operador ternário

    /**
     * Creates new form Raquete_mosquito
     */
    public Raquete_mosquito() {
        initComponents();
        bateria = 100;
        mosquito = 0;
        textRaquete.setText("Bateria: " + String.valueOf(bateria) + simbolo + "\nMosquitos mortos: " + String.valueOf(mosquito));
        ligado = "nao";

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btCarregar = new javax.swing.JButton();
        btUsar = new javax.swing.JButton();
        btLigar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textRaquete = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btCarregar.setText("Carregar");
        btCarregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCarregarMouseClicked(evt);
            }
        });

        btUsar.setText("Usar");
        btUsar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btUsarMouseClicked(evt);
            }
        });

        btLigar.setText("Ligar");
        btLigar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btLigarMouseClicked(evt);
            }
        });

        textRaquete.setColumns(20);
        textRaquete.setRows(5);
        jScrollPane1.setViewportView(textRaquete);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btCarregar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btUsar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btLigar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(btCarregar)
                        .addGap(18, 18, 18)
                        .addComponent(btUsar)
                        .addGap(18, 18, 18)
                        .addComponent(btLigar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btUsarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btUsarMouseClicked

        if (ligado == "nao") {
            JOptionPane.showMessageDialog(null, "Tem que ligar a raquete primeiro");
        } else {
            bateria -= 10; //a cada uso, 10% a menos
            diminuir = bateria <= 0 ? bateria = 0 : bateria; //caso bateria seja 0, bateria recebe 0, senão nenhuma condição é aplicada

            if (bateria == 0) { //bateria chegou a 0, desliga a raquete e aparece a mensagem
                JOptionPane.showMessageDialog(null, "Descarregada");
                ligado = "nao";
            } else { // fora isso tudo, vai aumentando a contagem de mosquito
                mosquito++;
            }

            textRaquete.setText("Bateria: " + String.valueOf(diminuir) + simbolo + "\nMosquitos mortos: " + String.valueOf(mosquito));
        }


    }//GEN-LAST:event_btUsarMouseClicked

    private void btLigarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btLigarMouseClicked
        ligado = "sim";
        if (bateria <= 0) {
            JOptionPane.showMessageDialog(null, "Descarregada, precisa carregar");
        } else {
            //
        };
    }//GEN-LAST:event_btLigarMouseClicked

    private void btCarregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCarregarMouseClicked
        if (bateria == 0) { //primeira condição, após isso, fica parecendo um loop, mas usando timer
           ligado = "nao";
        Timer n = new Timer();
        TimerTask tarefa = new TimerTask() {
            @Override
            public void run() {
                if (bateria < 100) {
                    bateria += 10;
                    textRaquete.setText("Bateria: " + bateria + simbolo + "\nMosquitos mortos: " + mosquito);
                } else {
                    n.cancel(); // Cancela o timer quando a bateria estiver cheia
                    JOptionPane.showMessageDialog(null, "Bateria totalmente carregada!");
                }
            }
        };
        n.scheduleAtFixedRate(tarefa, 0, 3000); //Executa imediatamente e depois a cada 3 segundos. Isso que faz parece igual a um loop pois enquanto a condição for menor que 100, vai rodar
    } else {
        JOptionPane.showMessageDialog(null, "Ainda há energia.");
    }


    }//GEN-LAST:event_btCarregarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Raquete_mosquito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Raquete_mosquito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Raquete_mosquito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Raquete_mosquito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Raquete_mosquito().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCarregar;
    private javax.swing.JButton btLigar;
    private javax.swing.JButton btUsar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textRaquete;
    // End of variables declaration//GEN-END:variables
}
